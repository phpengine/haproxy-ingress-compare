---
apiVersion: v1
kind: Namespace
metadata:
  name: haproxy-controller

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-kubernetes-ingress
  namespace: haproxy-controller

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-kubernetes-ingress
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - services
  - namespaces
  - events
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  resources:
  - ingresses
  - ingresses/status
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "extensions"
  - "networking.k8s.io"
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
- apiGroups:
  - core.haproxy.org
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - "discovery.k8s.io"
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-kubernetes-ingress
  namespace: haproxy-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-kubernetes-ingress
subjects:
- kind: ServiceAccount
  name: haproxy-kubernetes-ingress
  namespace: haproxy-controller
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-kubernetes-ingress
  namespace: haproxy-controller
data:
  forwarded-for: "true"
  forwardfor: "add"
  syslog-server: "address: stdout, format: raw, facility: daemon"
  request-capture: hdr(X-Forwarded-For)
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    run: haproxy-ingress
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: haproxy-kubernetes-ingress
    app.kubernetes.io/name: haproxy-kubernetes-ingress
  name: haproxy-kubernetes-ingress
  namespace: haproxy-controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      run: haproxy-ingress
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        run: haproxy-ingress
    spec:
      serviceAccountName: haproxy-kubernetes-ingress
      containers:
      - name: haproxy-ingress
        image: haproxytech/kubernetes-ingress
        args:
          - --configmap=haproxy-controller/haproxy-kubernetes-ingress
          - --default-backend-service=default/istio-ingressgateway
          - --default-ssl-certificate=default/self-signed-certificate
          - --ingress.class=haproxy
          - --empty-ingress-class
          - --log=debug
          - --controller.logging.level=debug
          - --controller.logging.traffic.address=stdout
          - --controller.logging.traffic.format=raw
          - --controller.logging.traffic.facility=daemon
        securityContext:
          runAsUser:  1000
          runAsGroup: 1000
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        resources:
          requests:
            cpu: "500m"
            memory: "50Mi"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 1042
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: stat
          containerPort: 1024
        env:
        - name: TZ
          value: "Etc/UTC"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: haproxy-ingress
  name: haproxy-kubernetes-ingress
  namespace: haproxy-controller
spec:
  selector:
    run: haproxy-ingress
  type: NodePort
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
    nodePort: 2080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
    nodePort: 2443
  - name: stat
    port: 1024
    protocol: TCP
    targetPort: 1024
    nodePort: 1024
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: global-restricted-psp
spec:
  privileged: true
  allowPrivilegeEscalation: true
  allowedCapabilities:
  - '*'
#  volumes:
#  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: true
  hostPID: true
  requiredDropCapabilities: []
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
#  allowPrivilegeEscalation: false
#  fsGroup:
#    ranges:
#    - max: 65535
#      min: 1
#    rule: MustRunAs
#  requiredDropCapabilities:
#  - ALL
#  runAsUser:
#    rule: MustRunAsNonRoot
#  seLinux:
#    rule: RunAsAny
#  supplementalGroups:
#    ranges:
#    - max: 65535
#      min: 1
#    rule: MustRunAs
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  - persistentVolumeClaim
